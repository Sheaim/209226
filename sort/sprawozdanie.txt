Tadeusz Ma³uszyñski
16. April 2015

lab 06 report

----------------------------
1. Zadanie

Zaimplementowaæ algorytm sortuj¹cy inny ni¿ quicksort, heapsort, bubblesort etc.
Opisaæ przeprowadzone testy i zastanowiæ siê nad z³o¿onoœci¹ algorytmu.

2. Implementacja

Zaimplementowano algorytm Comb Sort (sortowanie grzebieniowe). Teoretyczna z³o¿onoœæ algorytmu wynosi O(nlogn)
Jest oparta na metodzie bubblesort, ze wspó³czynnikiem 1.3 (wziête z wikipedii, hura)

Zaimplementowanym wariantem jest wariant podstawowy, tj:

za rozpiêtoœæ przyjmuje siê d³ugoœæ tablicy, dzieli siê rozpiêtoœæ przez 1.3, odrzuca czêœæ u³amkow¹
bada siê kolejno wszystkie pary obiektów odleg³ych o rozpiêtoœæ (jeœli s¹ u³o¿one niemonotonicznie - zamienia siê je miejscami)
wykonuje siê powy¿sze w pêtli dziel¹c rozpiêtoœæ przez 1.3 do czasu, gdy rozpiêtoœæ osi¹gnie wartoœæ 1.

3. Z³o¿onoœæ

Przeprowadzono testy przy pomocy biblioteki windows.h i zestawu funkcji dostêpnych w pliku Stoper.hh, aby zmierzyæ czas sortowania dla tablic o ró¿nych rozmiarach. Wyniki s¹ nastêpuj¹ce:

Iloœæ elementów | czas
     100        | 173
    1000        | 650
   10000        | 12707
  100000        | 98490
 1000000        | 1116850

Z³o¿onoœæ zaimplementowanego algorytmu dla ma³ych iloœci elementów jest wiêc rzêdu O(nlogn) zaœ dla du¿ych iloœci elementów zbli¿a siê do O(n^2). Jest to zgodne z teoretyzowanymi wartoœciami dla których w wariancie pesymistycznym z³o¿onoœæ algorytmu wynosi w³aœnie O(n^2).
----------------------------